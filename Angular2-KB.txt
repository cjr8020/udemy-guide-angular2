
	@@@@@@@@@@@@@@@@@

		Angular 2

	@@@@@@@@@@@@@@@@@



root module bootstrap
---------------------
change from RC4 to RC5+, instead of having bootstrap in main.ts, now the root component is bootstraped in

app.module.ts

1. import the root component:

  import { AppComponent } from './app.component';

2. declare in declarations:

@NgModule({
  declarations: [
    AppComponent
  ],

3. and announce that this component should be bootstraped:

  bootstrap: [AppComponent]

in main.ts
----------

we now import 

  import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

and execute .bootstrapModule(AppModule) method on it.  

adding other components
------------------------

Now instead of adding other components as directives on the root component as directives
add other components to app.module.ts:

  import { OtherComponent } from './other/other.component';

  @NgModule({
    declarations: [
      AppComponent,
      OtherComponent
    ],

angular-cli will do this when you run '$ ng g c other'

Advantage: when you declare other modules in app.module.ts, they are all available to 
other components.



======================================================================

  Angular Modules 
  ***************

Angular Modules help organize an application into cohesive blocks of 
functionality.

Modules are a great way to organize the application and extend it with capabilities
from external libraries.  Many libraries are modules (e.g. FormsModule, HttpModule,
RouterModule).  Many 3rd party libs are available as Angular modules (e.g. Material
Design, Ionic, AngularFire2).

Modules consolidate components, directives and pipes into cohesive blocks of 
functionality, each focused on a feature area, application business domain, etc..

Modules can be loaded eagerly when the app starts, or lazy loaded asynch by the 
router.

Every Angular app has at least once module class - the root module.
We bootstrap that module to launch the application.

The root module is all we need in a simple application with a few components.
As the app grows, we refactor the root module into feature modules, and we
import these modules into root module.

An Angular Module is a class adorned with the @NgModule decorator function.

root module
-----------

By convention, root module is a class called 'AppModule' in a file named
app.module.ts

  import { NgModule }      from '@angular/core';
  import { BrowserModule } from '@angular/platform-browser';

  import
        { AppComponent }  from './app.component';

  @NgModule({
    imports: [ BrowserModule ],
    declarations: [ AppComponent ],
    bootstrap:    [ AppComponent ]
  })
  export class AppModule { }

NgModule
  this decorator defines the metadata for the module.
  this metadata imports a single helper module - BrowserModule - which 
  every browser app must import.

BrowserModule
  registers critical app service providers and 
  includes common directives like NgIf and NgFor

declarations
  this list identifies the application's only component, the root component
  "AppComponent"

bootstrap
  this property identies this AppComponent as the bootstrap component.
  When Angular launches the app, it places the HTML rendering of AppComponent
  in the DOM, inside the <my-app> element tags of the index.html.  

app/app.component.ts
----------------------



  

======================================================================


  angular-cli project folder structure (non-webpack)
  ************************************

project-name
      |
    - config/
        config folder for testing
    - dist/
      build artifacts
      auto generated
    - e2e/
    - public/
        any artifacts you want copied to dist/ folder
     - src/
        - app/
          - environment.ts
              allows to switch to 'prod' for instance which changes some behaviors like login for instance...

          - app.component.css
          - app.component.html
          - app.component.spec.ts
          - app.component.ts
              
          - index.ts
              groups all the exports from the app folder together
        - index.html
            this is where you are loading your application component
            and of course you need to bootstrap it by importing main.ts
            which bootstraps your component.

        - main.ts
            important for bootstrapping your application

        - system-config.ts
            configures SystemJS.
        - tsconfig.json
            configures TypeScript compilation

        - typings.d.ts
            sets up typings in your TypeScript code.
    - tmp/
    - typings/
        holds typings that get imported

    - angular-cli.json
        configures your project under angular-cli
    - angular-cli-build.js
        configures files to be copied to the vendor folder
        vendor folder holds only dependencies required in production

    - package.json

    - tslint.json
        by default uses codelyzer to implement angular2 styleguide.
    - typings.json
        specifies which typings should be installed in the typings folder

        
=====================================================================

