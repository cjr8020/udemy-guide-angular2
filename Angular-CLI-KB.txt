
  @@@@@@@@@@@@@@@@

    Angular-CLI

  @@@@@@@@@@@@@@@@

Update nodejs on ubuntu:
------------------------

$ sudo npm cache clean -f
$ sudo npm install -g n
$ sudo n stable
$ sudo ln -sf /usr/local/n/versions/node/<VERSION>/bin/node /usr/bin/node


Updating typescript
-------------------

  $ tsc --version

To install the latest stable 

  $ sudo npm install -g typescript

or 

  $ sudo npm install -g typescript@latest

or 'next'

  $ sudo npm install -g typescript@next  




Updating angular-cli
--------------------

$ sudo npm uninstall -g angular-cli
$ sudo npm cache clean -f
$ sudo npm install -g angular-cli@latest

Local project package:

  $ rm -rf node_modules dist tmp
  $ npm install --save-dev angular-cli@latest
  $ ng init

NOTE: angular-cli install on RHEL 6
was failing on node-sass installation using /usr/bin/gcc [v 4.4.7]
needed to use gcc v4.8.2 which was installed with devtoolset-2
you should have the following in your .bashrc or .bash_profile

  source /opt/rh/devtoolset-2/enable


==============================================================================  

List currently installed version
--------------------------------

$ npm list -g --depth=0 | grep angular-cli

typescript
----------

$ sudo npm install -g typescript@next
$ tsc --version
Version 2.1.0-dev.20161003

  

==============================================================================  
  update node and npm
  *******************

nodejs
------

$ sudo npm cache clean -f
$ sudo npm install -g n
$ sudo n stable

$ sudo ln -sf /usr/local/n/versions/node/<VERSION>/bin/node /usr/bin/node

To upgrade to the latest version (not the current stable):

$ sudo n latest

To undo:

  sudo apt-get install --reinstall nodejs-legacy     # fix /usr/bin/node
  sudo n rm 6.0.0     # replace number with version of Node that was installed
  sudo npm uninstall -g n

npm
----

$ sudo npm install npm -g

==============================================================================  

NOTE: angular-cli@1.0.0-beta.11-webpack.8 does NOT work with typescript@2.0.2
so for now when you run 
  $ ng new blah
change "typescript": "^2.0.0" to "typescript": "2.0.0" in packages.json
then
  $ rm -rf node_modules dist tmp typings
  $ npm install --save-dev angular-cli@webpack  

==============================================================================  

Usage
-----

  $ ng new <project-name>

To create project in a directory named differently

  $ ng new <project-name> -dir <dir-name>

To create all component with a particular prefix

  $ ng new <project-name> --prefix <prefix-name>


module

  $ ng g m <module-name>

creates the following structure relative to working dir:

  installing module
    create src/app/module-name/module-name.module.ts
  installing component
    create src/app/module-name/module-name.component.css
    create src/app/module-name/module-name.component.html
    create src/app/module-name/module-name.component.spec.ts
    create src/app/module-name/module-name.component.ts

Other ioptions:

  --spec   specifies if a spec file is generated
  --routing (boolean) if a routing module file should be generated






Components have selectors, and prefixes would help with the selectors.


Create angular2 project in existing directory
---------------------------------------------

  $ mkdir <project-name>
  $ ng init --name <project-name> --prefix <prefix-name>


=====================================================================

  create and wire new component
  ----------------------------

Create new component 'books'

  $ ng g c books

This will create a new folder 'app/books' with the following content:

  index.ts
  books.component.ts
  books.component.html
  books.component.css
  books.component.spec.ts

app.module.ts
-------------
Add bootstrapping for the new module:

import { BooksComponent } from './books/books.component';

@NgModule({
  declarations: [
    AppComponent,
    BooksComponent
  ],

app.component.ts
----------------

NOTE: here do NO LONGER need to import and declare BooksComponent as directives - this is because
when BooksComponent is declared above in app.module.ts (done by angular-cli)
it is automatically available to all components.
Just go straight to app.component.html and use it: <app-books></app-books>


  import { BooksComponent } from './books'; // NO NEED

  @Component({
    ...
    directives: [BooksComponent] // NO NEED




app.component.html
------------------
To include the content of 'books.component.html' we need to look up the selector
tag in 'book.component.ts' - it is 'app-books'

so we can include this in 'app.component.html':

<app-books></app-books>

Destroy Component
=================

  $ ng destroy component books

this will remove the 5 files that were auto-gen'ed by angular-cli, however
modifications to the following files:
  app.module.ts
  app.component.ts
  app.component.html
  and the folder 'books' 
will have to be manually removed




To generate a new component with flat structure, inline styles and template

  $ ng g c <component-name> --flat -it -is



=====================================================================

  creating a new service
  **********************

  $ ng g s <service-name> --flat --spec 

    --flat (default: true)


create config service
---------------------
$ mkdir src/app/shared
craiskin@xubi-one:~/ws/standard/iam/iam-demo-ng2-product-app $ ng g s shared/Config
installing service
  create src/app/shared/config.service.spec.ts
  create src/app/shared/config.service.ts
  WARNING Service is generated but not provided, it must be provided to be used

create mdm product service
$ ng g s MdmProduct
installing service
  create src/app/mdm-product.service.spec.ts
  create src/app/mdm-product.service.ts
  WARNING Service is generated but not provided, it must be provided to be used


create ConfigService
--------------------

import { Injectable } from '@angular/core';
import { environment } from '../../environments/environment';

@Injectable()
export class ConfigService {
  public production: boolean = environment.production;
  public mdmProductServer: string = environment.MDM_PRODUCT_SERVER;
  public mdmProductApi: string = environment.MDM_PRODUCT_API;

  public mdmProductApiURL(): string {
    return this.mdmProductServer + this.mdmProductApi;
  }
}


Provide ConfigService in @NgModule AppModule:
---------------------------------------------

import { AppComponent } from './app.component';
import { environment } from '../environments/environment';
import { ConfigService } from './shared/config.service';


@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    FormsModule,
    HttpModule,
    AlertModule
  ],
  providers: [ ConfigService ],
  bootstrap: [AppComponent]
})
export class AppModule {

  constructor() { }
}

use ConfigService in MdmProductService
--------------------------------------

import { Injectable } from '@angular/core';
import { ConfigService } from './shared/config.service';

@Injectable()
export class MdmProductService {

  constructor(private configService: ConfigService) { 
    console.log(`
      I'm MdmProductService, and I'm configured with ConfigService
      ConfigService.mdmProductServer: ${configService.mdmProductApiURL()}
    `);
  }

}



=====================================================================

  angular-cli project folder structure (webpack)
  ************************************

project-name
      |
      src/
        |
        app/
        assets/
        environments/
        index.html
        main.ts (bootstrap)
        polyfills.ts
        styles.css (global styles)
        test.ts (runner)
        tsconfig.json
        typings.d.ts
      |
      e2e/
      dist/

      angular-cli.json (project structure)
      karma.conf.js (unit tests config)
      protractor.conf.js (e2e tests config)
      package.json (project dependencies)

      tslint.json (linting rules)



  angular-cli project folder structure (non-webpack)
  ************************************

project-name
      |
    - config/
        config folder for testing
    - dist/
      build artifacts
      auto generated
    - e2e/
    - public/
        any artifacts you want copied to dist/ folder
     - src/
        - app/
          - environment.ts
              allows to switch to 'prod' for instance which changes some behaviors like login for instance...

          - app.component.css
          - app.component.html
          - app.component.spec.ts
          - app.component.ts

          - index.ts
              groups all the exports from the app folder together
        - index.html
            this is where you are loading your application component
            and of course you need to bootstrap it by importing main.ts
            which bootstraps your component.

        - main.ts
            important for bootstrapping your application

        - system-config.ts
            configures SystemJS.
        - tsconfig.json
            configures TypeScript compilation

        - typings.d.ts
            sets up typings in your TypeScript code.
    - tmp/
    - typings/
        holds typings that get imported

    - angular-cli.json
        configures your project under angular-cli
    - angular-cli-build.js
        configures files to be copied to the vendor folder
        vendor folder holds only dependencies required in production

    - package.json

    - tslint.json
        by default uses codelyzer to implement angular2 styleguide.
    - typings.json
        specifies which typings should be installed in the typings folder



=====================================================================

09.21.2016

  $ sudo npm install -g angular-cli@latest
  $ ng -v

  angular-cli: 1.0.0-beta.15
  node: 6.6.0
  os: linux x64




$ npm install -g angular-cli

  as of august 2016, installs 1.0.0-beta.10

angular-cli@webpack
https://github.com/angular/angular-cli/blob/master/WEBPACK_UPDATE.md

Global package:

  $ sudo npm uninstall -g angular-cli
  $ sudo npm cache clean
  $ sudo npm install -g angular-cli@webpack

  $ ng -v

  craiskin@xubi-one:~ $ ng -v
  Could not start watchman; falling back to NodeWatcher for file system events.
  Visit http://ember-cli.com/user-guide/#watchman for more info.
  angular-cli: 1.0.0-beta.11-webpack.8
  node: 6.4.0
  os: linux x64


Local project package:

  # commit any changes you have to git first
  rm -rf node_modules dist tmp typings
  npm install --save-dev angular-cli@webpack

Project files

  you will need to run 'ng init' to check for changes in all the auto-gen'ed files created by 'ng new'.




==============================================================

  Tutorial
  --------
https://www.sitepoint.com/angular-2-tutorial/

$ ng new angular2-todo-app

├── angular-cli-build.js
├── angular-cli.json
├── config
│   ├── environment.dev.ts
│   ├── environment.js
│   ├── environment.prod.ts
│   ├── karma.conf.js
│   ├── karma-test-shim.js
│   └── protractor.conf.js
├── e2e
│   ├── app.e2e-spec.ts
│   ├── app.po.ts
│   ├── tsconfig.json
│   └── typings.d.ts
├── package.json
├── public
├── README.md
├── src
│   ├── app
│   │   ├── app.component.css
│   │   ├── app.component.html
│   │   ├── app.component.spec.ts
│   │   ├── app.component.ts
│   │   ├── environment.ts
│   │   ├── index.ts
│   │   └── shared
│   │       └── index.ts
│   ├── favicon.ico
│   ├── index.html
│   ├── main.ts
│   ├── system-config.ts
│   ├── tsconfig.json
│   └── typings.d.ts
├── tslint.json
├── typings
│   └── ...
└── typings.json



==============================================================

  ng

ng help <command-name default: all> <options>

  --verbose (boolean) default: false
  -v

ng init <glob-pattern> <options>

    creates a new angular-cli project in the current folder

  --dry-run (Boolean) (Default: false)
    aliases: -d

  --verbose (Boolean) (Default: false)
    aliases: -v

  --blueprint (String)
    aliases: -b <value>

  --link-cli (Boolean) (Default: false)
    aliases: -lc

  --skip-npm (Boolean) (Default: false)
    aliases: -sn

  --skip-bower (Boolean) (Default: true)
    aliases: -sb

  --name (String) (Default: )
    aliases: -n <value>

  --source-dir (String) (Default: src)
    aliases: -sd <value>

  --style (String) (Default: css)

  --prefix (String) (Default: app)
    aliases: -p <value>

  --mobile (Boolean) (Default: false)
  
  --routing (Boolean) (Default: false)


ng new <app-name> <options>
  creates a new directory and runs 'ng init' in it
  --dry-run
  -d
  --verbose
  -v
  --blueprint (default: app)
  -b <value>
  --skip-npm (default: false)
  -sn
  --skip-bower (default: false)
  -sb
  --skip-git (default: false )
  -sg
  --directory (string)
  -dir <value>

ng serve
  builds and serves your app, rebuilding on file changes
  ng s
  --port (default: 4200)
  -p <value>
  --host (default: all interfaces)
  -H <value>
  --proxy
  -pr <value>
  --insecure-proxy (default: false)

ng test <options>


ng build

  Builds your app and places it into the output path (dist/ by default).
  aliases: b
  --target (String) (Default: development)
    aliases: -t <value>, -dev (--target=development), -prod (--target=production)
  --environment (String) (Default: )
    aliases: -e <value>
  --output-path (Path) (Default: null)
    aliases: -o <value>
  --watch (Boolean) (Default: false)
    aliases: -w
  --watcher (String)
  --suppress-sizes (Boolean) (Default: false)
  --base-href (String) (Default: null)
    aliases: -bh <value>
  --aot (Boolean) (Default: false)



==============================================================

  Installing 3rd party libraries
  ******************************

Q: how to add or bundle external js files?
http://stackoverflow.com/questions/38855891/angular-cli-webpack-how-to-add-or-bundle-external-js-files

A:
https://github.com/angular/angular-cli#3rd-party-library-installation
https://coryrylan.com/blog/angular-2-cli-adding-third-party-libraries

First, install your library with npm:

  $ npm install d3 --save

Next, install the TypeScript definitions to allow our code to have better
autocompletion and dev experience. Note: if you use a library that was written
in TS such as RxJS, you don't have to worry about installing the type 
definitions).

  $ npm install @types/d3 --save-dev

  [ look at the difference between '--save-dev' and '--save' options ]

Now that the library is installed, import it into any file in your app:

  import * as _ from 'lodash';


Global installation
-------------------

Some js libraries need to be added to the global scope and loaded as if they
were a script tag.  This is done via angular-cli.json

bootstrap4 example:

  $ npm install bootstrap@next

Then add the needed script files to apps[0].scripts:

  "scripts": [
    "../node_modules/jquery/dist/jquery.js",
    "../node_modules/tether/dist/js/tether.js",
    "../node_modules/bootstrap/dist/js/bootstrap.js"
  ],    

Finally, add the Bootstrap CSS to the apps[0].styles array:

  "styles": [
    "styles.css",
    "../node_modules/bootstrap/dist/css/bootstrap.css"
  ],

Restart 'ng serve' if you're running it, and bootstrap 4 should be working.

================================================================================

ng2-bootstrap
*************

contains all core (and not only) Bootstrap components powered by Angular2.
So you don't need to include original JS components, but we are using markup
and CSS provided by Bootstrap.


https://ng-bootstrap.github.io/#/getting-started

installation:

$ npm install ng2-bootstrap --save
You will need to bootstrap styles:

<!-- index.html -->
<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">


To use ng2-bootstrap with Angular CLI
-------------------------------------
https://github.com/valor-software/ng2-bootstrap/blob/development/docs/getting-started/ng-cli.md

$ ng new my-app
$ cd my-app
$ ng serve

Adding bootstrap: 

1. install ng2-bootstrap and bootstrap

  $ npm install ng2-bootstrap bootstrap --save


--> NOTE: ng2-bootstrap 1.1.16-9  changes:

  Now, 'AlertModule' alone is not sufficient for the example below.
  You will get 
    "Error in ./AppComponent class AppComponent - inline template:3:4 caused by: 
    No provider for AlertConfig!"

  So, will also need to add AlertConfig as provider in
  app.module.ts:

      providers: [ 
        AlertConfig,            // ng2-bootstrap
      ]


2. open src/app/app.module.ts and add:

import { AlertModule, AlertConfig } from 'ng2-bootstrap';
...

@NgModule({
   ...
   imports: [AlertModule, ... ],
   providers: [ 
       AlertConfig,            // ng2-bootstrap
   ]
})

3. open angular-cli.json and insert a new entry into the styles array

      "styles": [
        "styles.css",
        "../node_modules/bootstrap/dist/css/bootstrap.min.css"
      ],


4. to validate, open src/app/app.component.html and add:

<alert type="success">hello</alert>        



==============================================================


  Applications Styles
  *******************

When we add styles to a component, we're keeping everything a component needs -
HTML, the CSS, the code - together in one convenient place.

We can also create styles at the application level outside of any component.

angular-cli provides styles.css at the index.html level and it's already 
integrated into the project via 

angular-cli.json:

      "styles": [
        "styles.css"
      ],

styles.css - allows users to add global styles and supports CSS imports

  if the project is created with the --style=sass option, this will be a
  .sass file instead and the same applies to scss/less/style.

You can add more global styles via the apps[0].styles property in
angular-cli.json


================================================================================


  No binary for Chrome browser on your platform
  *********************************************

$ ng t --watch false
Could not start watchman; falling back to NodeWatcher for file system events.
Visit http://ember-cli.com/user-guide/#watchman for more info.
28 10 2016 12:59:56.042:INFO [karma]: Karma v1.2.0 server started at http://localhost:9876/
28 10 2016 12:59:56.043:INFO [launcher]: Launching browser Chrome with unlimited concurrency
28 10 2016 12:59:56.096:INFO [launcher]: Starting browser Chrome
28 10 2016 12:59:56.097:ERROR [launcher]: No binary for Chrome browser on your platform.
  Please, set "CHROME_BIN" env variable.



  How to run tests without browser?
  *********************************

https://github.com/angular/angular-cli/issues/2013


$ npm --version
3.10.6
$ ng --version
angular-cli: 1.0.0-beta.11-webpack.8
node: 6.4.0
os: darwin x64

npm i --save-dev karma-phantomjs-launcher

Then I modified the plugins property of the karma.conf.js file, adding the 
PhantomJS plugin to the list. Also add PhantomJS to the browsers property.

plugins: [
    require( 'karma-jasmine' ),
    require( 'karma-chrome-launcher' ),
    require( 'karma-phantomjs-launcher' ),
    require( 'karma-remap-istanbul' ),
    require( 'angular-cli/plugins/karma' )
],
...
browsers: [ 'PhantomJS', 'Chrome' ],

Since you want a completely headless experience, you can remove Chrome 
from the browsers property, and remove the karma-chrome-launcher from 
the plugins array as well.

execute tests:

$ ng test --build --browsers PhantomJS --watch false --log-level debug


==============================================================

  Angular AOT compiler
  ********************

Angular "ahead-of-time" compiler.
https://angular.io/docs/ts/latest/cookbook/aot-compiler.html
The Angular2 Compiler - Tobias Bosch
https://www.youtube.com/watch?v=kW9cJsvcsGo

Angular2 AOT with Webpack and Lazy Loading
http://www.dzurico.com/angular-aot-webpack-lazy-loading/

With AoT, the compiler runs once at build time using one set of libraries.
With JiT, it runs every time for every user at runtime using a different set
of libraries.

JIT compilation, also known as dynamic translation, is compilation done 
during execution of a program - at run time. When the user opens the browser,
the following steps are performed:

1. download the JS assets
2. angular bootstraps
3. angular goes thru the JiT compilation generating all the JS for each component
   of the application
4. the application gets rendered

In AoT, we prepare everything before and we don't need anything else to dynamically
compile the template:

-faster rendering
-fewer async requests
-smaller angular framework download size
-better security


================================================================================


  angular 2 library
  *****************
Issue #3580
Using angular-cli to generate a component library for angular 2
https://github.com/angular/angular-cli/issues/3580

http://www.dzurico.com/how-to-create-an-angular-library/
https://github.com/daniele-zurico/angular2-library

================================================================================

  deploying with angular-cli
  **************************

ng build can specify both a build target (--target=production or --target=development) 
and an environment file to be used with that build (--environment=dev or --environment=prod). 
By default, the development build target and environment are used.

The mapping used to determine which environment file is used 
can be found in angular-cli.json:

"environments": {
  "source": "environments/environment.ts",
  "dev": "environments/environment.ts",
  "prod": "environments/environment.prod.ts"
}

These options also apply to the serve command. If you do not pass a value for environment, it will default to dev for development and prod for production.


# these are equivalent
ng build --target=production --environment=prod
ng build --prod --env=prod
ng build --prod  

================================================================================


## Deploying to Apache
   *******************

Suppose, you're about to deploy this app to an apache 2.2 instance to an 
Alias'ed path:

```
Alias /ng/ "/apps/angular-apps/"
<Directory /apps/angular-apps>
  Order allow,deny
  Allow from all
  AllowOverride All
</Directory>
```
Angular2 Router supports two techniques for managing browser's location and history:

1. PathLocationStrategy - the default "HTML 5 pushState" style
2. HashLocationStrategy - the "hash URL" style (for real old browsers)

To make `PathLocationStrategy` work on Apache, you will need to create an
`.htaccess` file in the same location as your index.HTML

Taking into consideration the above httpd.conf snippet, here's the `.htaccess` 
file content:

```
<IfModule mod_rewrite.c>
  RewriteEngine On
  RewriteBase /ng/tour-of-heroes/
  RewriteRule ^index\.html$ - [L]

  RewriteCond %{REQUEST_FILENAME} !-f
  RewriteCond %{REQUEST_FILENAME} !-d

  # do not rewrite css, js and images
  RewriteCond %{REQUEST_URI} !\.(?:css|js|map|jpe?g|gif|png)$ [NC]

  RewriteRule . /ng/tour-of-heroes/index.html [L]
</IfModule>
```

Finally, generate the `prod` distribution for this application to be deployed
on the apache server using the following command:

```
$ ng build --prod --base-href /ng/tour-of-heroes/
```
This will ensure that the generated `index.html` file has `base href` that 
matches our target server configuration:

```
<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>Ng2TourOfHeros</title>
  <base href="/ng/tour-of-heroes/">

  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
<link href="styles.622c1e2152786c612d9feac19a219d0e.bundle.css" rel="stylesheet"></head>
<body>
  <app-root>Loading...</app-root>
<script type="text/javascript" src="inline.d41d8cd98f00b204e980.bundle.js"></script>
<script type="text/javascript" src="styles.b2328beb0372c051d06d.bundle.js"></script>
<script type="text/javascript" src="main.19929f08046e175b7224.bundle.js"></script>
</body>
</html>
```
================================================================================
